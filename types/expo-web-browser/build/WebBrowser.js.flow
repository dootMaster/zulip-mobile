/* @flow
 * @generated by TsFlower
 */
import {
    type WebBrowserAuthSessionResult as WebBrowserAuthSessionResult_,
    type WebBrowserCompleteAuthSessionOptions as WebBrowserCompleteAuthSessionOptions_,
    type WebBrowserCompleteAuthSessionResult as WebBrowserCompleteAuthSessionResult_,
    type WebBrowserCoolDownResult as WebBrowserCoolDownResult_,
    type WebBrowserCustomTabsResults as WebBrowserCustomTabsResults_,
    type WebBrowserMayInitWithUrlResult as WebBrowserMayInitWithUrlResult_,
    type WebBrowserOpenOptions as WebBrowserOpenOptions_,
    type WebBrowserRedirectResult as WebBrowserRedirectResult_,
    type WebBrowserResult as WebBrowserResult_,
    WebBrowserResultType,
    type WebBrowserResultTypeT as WebBrowserResultTypeT_,
    type WebBrowserWarmUpResult as WebBrowserWarmUpResult_,
    type WebBrowserWindowFeatures as WebBrowserWindowFeatures_,
} from "./WebBrowser.types";

export { WebBrowserResultType };

export type WebBrowserAuthSessionResult = WebBrowserAuthSessionResult_;
export type WebBrowserCompleteAuthSessionOptions = WebBrowserCompleteAuthSessionOptions_;
export type WebBrowserCompleteAuthSessionResult = WebBrowserCompleteAuthSessionResult_;
export type WebBrowserCoolDownResult = WebBrowserCoolDownResult_;
export type WebBrowserCustomTabsResults = WebBrowserCustomTabsResults_;
export type WebBrowserMayInitWithUrlResult = WebBrowserMayInitWithUrlResult_;
export type WebBrowserOpenOptions = WebBrowserOpenOptions_;
export type WebBrowserRedirectResult = WebBrowserRedirectResult_;
export type WebBrowserResult = WebBrowserResult_;
export type WebBrowserResultTypeT = WebBrowserResultTypeT_;
export type WebBrowserWarmUpResult = WebBrowserWarmUpResult_;
export type WebBrowserWindowFeatures = WebBrowserWindowFeatures_;

declare export function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults>;
declare export function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult>;
declare export function mayInitWithUrlAsync(url: string, browserPackage?: string): Promise<WebBrowserMayInitWithUrlResult>;
declare export function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult>;
declare export function openBrowserAsync(url: string, browserParams?: WebBrowserOpenOptions): Promise<WebBrowserResult>;
declare export function dismissBrowser(): void;
declare export function openAuthSessionAsync(url: string, redirectUrl: string, browserParams?: WebBrowserOpenOptions): Promise<WebBrowserAuthSessionResult>;
declare export function dismissAuthSession(): void;
declare export function maybeCompleteAuthSession(options?: WebBrowserCompleteAuthSessionOptions): WebBrowserCompleteAuthSessionResult;
