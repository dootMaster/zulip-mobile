/* @flow
 * @generated by TsFlower
 */

declare export var Orientation: {|
  /**
   * An unknown screen orientation. For example, the device is flat, perhaps on a table.
   */
  +UNKNOWN: 0,
  /**
   * Right-side up portrait interface orientation.
   */
  +PORTRAIT_UP: 1,
  /**
   * Upside down portrait interface orientation.
   */
  +PORTRAIT_DOWN: 2,
  /**
   * Left landscape interface orientation.
   */
  +LANDSCAPE_LEFT: 3,
  /**
   * Right landscape interface orientation.
   */
  +LANDSCAPE_RIGHT: 4,
|};
export type OrientationT = $Values<typeof Orientation>;

/**
 * An enum whose values can be passed to the [`lockAsync`](#screenorientationlockasyncorientationlock)
 * method.
 * > __Note:__ `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which
 * > don't support `OrientationLock.PORTRAIT_DOWN`.
 */
declare export var OrientationLock: {|
  /**
   * The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`.
   * On Android, this lets the system decide the best orientation.
   */
  +DEFAULT: 0,
  /**
   * All four possible orientations
   */
  +ALL: 1,
  /**
   * Any portrait orientation.
   */
  +PORTRAIT: 2,
  /**
   * Right-side up portrait only.
   */
  +PORTRAIT_UP: 3,
  /**
   * Upside down portrait only.
   */
  +PORTRAIT_DOWN: 4,
  /**
   * Any landscape orientation.
   */
  +LANDSCAPE: 5,
  /**
   * Left landscape only.
   */
  +LANDSCAPE_LEFT: 6,
  /**
   * Right landscape only.
   */
  +LANDSCAPE_RIGHT: 7,
  /**
   * A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
   */
  +OTHER: 8,
  /**
   * An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
   */
  +UNKNOWN: 9,
|};
export type OrientationLockT = $Values<typeof OrientationLock>;

/**
 * Each iOS device has a default set of [size classes](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html)
 * that you can use as a guide when designing your interface.
 */
declare export var SizeClassIOS: {|
  +REGULAR: 0,
  +COMPACT: 1,
  +UNKNOWN: 2,
|};
export type SizeClassIOST = $Values<typeof SizeClassIOS>;

/**
 * An enum representing the lock policies that can be applied on the web platform, modelled after
 * the [W3C specification](https://w3c.github.io/screen-orientation/#dom-orientationlocktype).
 * These values can be applied through the [`lockPlatformAsync`](#screenorientationlockplatformasyncoptions)
 * method.
 */
declare export var WebOrientationLock: {|
  +PORTRAIT_PRIMARY: 'portrait-primary',
  +PORTRAIT_SECONDARY: 'portrait-secondary',
  +PORTRAIT: 'portrait',
  +LANDSCAPE_PRIMARY: 'landscape-primary',
  +LANDSCAPE_SECONDARY: 'landscape-secondary',
  +LANDSCAPE: 'landscape',
  +ANY: 'any',
  +NATURAL: 'natural',
  +UNKNOWN: 'unknown',
|};
export type WebOrientationLockT = $Values<typeof WebOrientationLock>;

declare export var WebOrientation: {|
  +PORTRAIT_PRIMARY: 'portrait-primary',
  +PORTRAIT_SECONDARY: 'portrait-secondary',
  +LANDSCAPE_PRIMARY: 'landscape-primary',
  +LANDSCAPE_SECONDARY: 'landscape-secondary',
|};
export type WebOrientationT = $Values<typeof WebOrientation>;

export type PlatformOrientationInfo = {
  screenOrientationConstantAndroid?: number,
  screenOrientationArrayIOS?: OrientationT[],
  screenOrientationLockWeb?: WebOrientationLockT,
  ...
};

export type ScreenOrientationInfo = {
  orientation: OrientationT,
  verticalSizeClass?: SizeClassIOST,
  horizontalSizeClass?: SizeClassIOST,
  ...
};

export type OrientationChangeListener = (event: OrientationChangeEvent) => void;

export type OrientationChangeEvent = {
  orientationLock: OrientationLockT,
  orientationInfo: ScreenOrientationInfo,
  ...
};
